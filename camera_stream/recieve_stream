import io
import picamera
import cv2
import numpy as np
import apriltag
from flask import Flask, Response

app = Flask(__name__)

def generate_frames():
    # Initialize the AprilTag detector
    detector = apriltag.Detector()
    
    with picamera.PiCamera() as camera:
        camera.resolution = (640, 480)
        camera.framerate = 24
        stream = io.BytesIO()
        
        for _ in camera.capture_continuous(stream, 'jpeg', use_video_port=True):
            # Convert the JPEG image to an OpenCV image
            data = np.frombuffer(stream.getvalue(), dtype=np.uint8)
            frame = cv2.imdecode(data, 1)
            
            # Detect AprilTags in the frame
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            detections = detector.detect(gray)
            
            # Draw AprilTag detections on the frame
            for detection in detections:
                detection.draw(frame)
            
            # Encode the frame to JPEG format for streaming
            ret, jpeg = cv2.imencode('.jpg', frame)
            frame_bytes = jpeg.tobytes()
            
            # Yield the frame for streaming
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
            
            # Reset the stream for the next frame
            stream.seek(0)
            stream.truncate()

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace;boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, threaded=True)
